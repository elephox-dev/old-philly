#!/usr/bin/env php
<?php

declare(strict_types=1);

if (PHP_SAPI != 'cli') {
    echo PHP_EOL . 'PhillyCLI may only be invoked from a command line, got "' . PHP_SAPI . '"' . PHP_EOL;

    exit(1);
}

$autoload = "vendor" . DIRECTORY_SEPARATOR . "autoload.php";
for ($i = 0; $i < 10 && realpath($autoload) === false; $i++) {
    $autoload = ".." . DIRECTORY_SEPARATOR . $autoload;
}

if (realpath($autoload) === false) {
    echo PHP_EOL . 'Could not find autoload.php' . PHP_EOL;

    exit(1);
}

/** @noinspection PhpIncludeInspection */
require $autoload;

/******************************************************************************/

use Philly\App;
use Philly\CLI\Commands\CommandArgument;
use Philly\CLI\Commands\CommandArgumentCollection;
use Philly\Contracts\CLI\Commands\Command as CommandContract;
use Philly\Contracts\CLI\Commands\CommandArgumentTemplate as CommandArgumentTemplateContract;
use Philly\Contracts\CLI\Commands\CommandArgumentTemplateCollection as CommandArgumentTemplateCollectionContract;
use Philly\Queue\Queue;
use ricardoboss\Console;

$app = App::inst();

Console::info(Console::magenta("Philly") . Console::blue("CLI") . " v" . Console::bold(App::VERSION));

$commands = $app->getCommands();

$args = new Queue($argv);

// remove path to bin
$args->dequeue();

if ($args->isEmpty()) {
    Console::warn('No command given. Showing all available commands.');

    // pass "list" as first argument
    $commandString = "list";
} else {
    // get first argument
    $commandString = $args->dequeue();
}

/** @var CommandContract $command */
$command = $commands->first(function (CommandContract $command) use ($commandString) {
    return $commandString === $command->getSignature()->getName();
});

if ($command === null) {
    Console::error('Unknown command: %s', $commandString);

    exit(2);
}

/** @var CommandArgumentTemplateContract[]|CommandArgumentTemplateCollectionContract $templates */
$templates = $command->getSignature()->getArguments();
$arguments = new CommandArgumentCollection();
foreach ($templates as $template) {
    if ($args->isEmpty()) {
        if (!$template->isOptional()) {
            Console::error("Value for required argument \"{$template->getName()}\" is missing.");

            exit(3);
        } else {
            $value = $template->getDefaultValue();
        }
    } else {
        $value = $args->dequeue();
    }

    $argument = new CommandArgument($template, $value);

    $arguments->add($argument);
}

$result = $command->handle($arguments);

if (!$result->isSuccess()) {
    Console::error('Command was not successful.');

    if (($throwable = $result->getThrowable()) !== null) {
        echo $throwable->getMessage() . PHP_EOL;
        echo $throwable->getTraceAsString() . PHP_EOL;
    }

    exit(1);
}

if (($value = $result->getValue()) !== null) {
    print_r($value);
}

exit(0);
